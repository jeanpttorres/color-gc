/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                           */
/*                  This file is part of the program and library             */
/*         SCIP --- Solving Constraint Integer Programs                      */
/*                                                                           */
/*    Copyright (C) 2002-2014 Konrad-Zuse-Zentrum                            */
/*                            fuer Informationstechnik Berlin                */
/*                                                                           */
/*  SCIP is distributed under the terms of the ZIB Academic License.         */
/*                                                                           */
/*  You should have received a copy of the ZIB Academic License              */
/*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      */
/*                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**@file   reader_coloring.c
 * @brief  Coloring problem reader file reader
 * @author Edna A. Hoshino
 *
 * This file implements the reader/parser used to read the coloring input data. For more details see \ref READER.
 *
 * @page READER Parsing the input format and creating the problem
 *
 * This READER process files with extension ".coloring" and it accepts file format described in [?] Hill paper.
 *
 * @section READERINCLUDE The SCIPincludeReaderColoring() interface method
 *
 * The interface method <code>SCIPincludeReaderColoring()</code> is called to add the reader plugin to \SCIP (see
 * cmain.c). This means \SCIP gets informed that this reader is available for reading input files. Therefore, the
 * function <code>SCIPincludeReader()</code> is called within this method which passes all necessary information of the
 * reader to SCIP. This information includes the name of the reader, a description, and the file extension for which the
 * file reader is in charge. In our case we selected the file extension "coloring". This means that all files which have
 * this file extension are passed to our reader for parsing. Besides these information the call
 * <code>SCIPincludeReader()</code> also passes for each callback of the reader a function pointers
 * (some of them might be NULL pointers). These function
 * pointers are used by \SCIP to run the reader. For more information about all available reader callbacks we refer to
 * the <a href="http://scip.zib.de/doc/html/READER.html">How to add file readers</a> tutorial. In the remaining section
 * we restrict ourself to the callback <code>READERREAD</code> which is the only one we implemented for the coloring
 * example. All other callbacks are not required for this example.
 *
 * @section READERREAD The READERREAD callback method
 *
 * The READERREAD callback is in charge of parsing a file and creating the problem. To see the list of arguments this
 * functions gets see the file type_reader.h in the source of \SCIP. The following arguments are of interest in our
 * case. First of all the \SCIP pointer, the file name, and the SCIP_RESULT pointer. The \SCIP pointer gives us the
 * current environment. The file name states the file which we should open and parse. Last but not least, the SCIP_RESULT
 * pointer is required to tell \SCIP if the parsing process was successfully or
 * not. Note that in type_reader.h you also find a list of allowable result values for the SCIP_RESULT pointer and the
 * <code>SCIP_RETCODE</code> which is the return value of this function.
 *
 * @subsection PARSING Parsing the problem
 *
 * The file can be opened and parsed with your favorite methods. In this case we are using the functionality provided by
 * \SCIP since this has some nice side effects. We are using the function SCIPfopen() which can besides standard
 * files also handle files which are packed. To find all files related to the parsing of a file, we refer to the file pub_misc.h
 * in the source of SCIP. Parsing the data out of the file is not that hard. Please look at the code and comments
 * therein for more details.
 *
 * @subsection CREATING Creating the problem
 *
 * After parsing the file the final task for the reader is to create the problem. In our case, we pass the collected data
 * to the \ref probdata_coloring.h "main problem data plugin". For this, we use the interface methods
 * SCIPprobdataCreate() which is provided by the
 * problem data plugin (see probdata_coloring.c). After that, the reader sets the result value for the SCIP_RESULT
 * pointer to <code>SCIP_SUCCESS</code> and returns with a proper <code>SCIP_RETCODE</code>.
 *
 *
 */

/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/


/*#define SCIP_DEBUG*/

#include <assert.h>
#include <string.h>

#include "scip/cons_setppc.h"

#include "probdata_coloring.h"
#include "reader_coloring.h"

/**@name Reader properties
 *
 * @{
 */

#define READER_NAME             "coloringreader"
#define READER_DESC             "file reader for coloring data format"
#define READER_EXTENSION        "coloring"

/**@} */
/*
#define DEPOT n-1
#define IS_DEPOT(i) (i==n-1)
*/
int getNextLine(SCIP_FILE* file, int* lineno, char* buffer);

/** Get next not empty line of the filestream and return it into the buffer */
int getNextLine(SCIP_FILE* file, int* lineno, char* buffer)
{
  do{
    /* ignore empty line */
    if( SCIPfgets(buffer, SCIP_MAXSTRLEN, file) == NULL )
      return 0;
    (*lineno)++;
  } while (buffer[0]=='\r' || buffer[0]=='\n');
  return 1;
}

/**@name Callback methods
 *
 * @{
 */

/** FABIO: problem reading method of reader */
static
SCIP_DECL_READERREAD(readerReadColoring)
{  /*lint --e{715}*/
   SCIP_FILE* file;
   SCIP_Bool error;

   char buffer[SCIP_MAXSTRLEN];

      /* coloring data */

   int n, **A, m;
   edgeT* E;
   int i, j, edges;

   *result = SCIP_DIDNOTRUN;

   /* open file */
   file = fopen(filename, "r");
   if( file == NULL )
   {
     /*SCIPerrorMessage("cannot open file <%s> for reading\n", filename);*/
      SCIPprintSysError(filename);
      return SCIP_NOFILE;
   }

   fscanf(file, "%d %d\n", &n, &m);
   E=(edgeT*)malloc(sizeof(edgeT)*m);
   A=(int**)malloc(sizeof(int*)*n);
   for(i=0;i<n;i++){
     A[i]=(int*)malloc(sizeof(int)*n);
     for(j=0;j<n;j++){
       A[i][j]=-1;
     }
   }
   edges=0;
   while(!feof(file)){
     fscanf(file, "%d %d\n", &i, &j);
     --i;--j;
     A[i][j]=A[j][i]=edges;
     E[edges].i=i;
     E[edges].j=j;
     edges++;
   }

#ifdef DEBUG
   for(i=0;i<m;i++){
     printf("\nEdge%d: (%d,%d)", i+1, E[i].i+1, E[i].j+1);
   }
#endif

   fclose(file);
   
   if(edges!=m){
     return SCIP_READERROR;
   }

   /* create a new problem in SCIP */
   SCIP_CALL( SCIPprobdataCreate(scip, filename, n, m, A, E) );
  
   *result = SCIP_SUCCESS;

   return SCIP_OKAY;
}

/**@} */


/**@name Interface methods
 *
 * @{
 */

/** includes the coloring file reader in SCIP */
SCIP_RETCODE SCIPincludeReaderColoring(
   SCIP*                 scip                /**< SCIP data structure */
   )
{
   SCIP_READERDATA* readerdata;
   SCIP_READER* reader;

   /* create coloring reader data */
   readerdata = NULL;

   SCIP_CALL( SCIPincludeReaderBasic(scip, &reader, READER_NAME, READER_DESC, READER_EXTENSION, readerdata) );
   assert(reader != NULL);

   SCIP_CALL( SCIPsetReaderRead(scip, reader, readerReadColoring) );

   return SCIP_OKAY;
}

/**@} */
